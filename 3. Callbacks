Callbacks

function callAndAdd(n, callbackFunction) {
  return n + callbackFunction();
}

function returnsThree() {
  return 3;
}

let result = callAndAdd(2, returnsThree);

console.log(result);
// 5

-----------

Question 1 of 5

What is true about callbacks? Select all that apply:

    A function that is passed as an argument to another function is called a callback.

    A function that takes another function in as an argument is a higher-order function.

    Leveraging callbacks is possible because JavaScript functions are first-class functions.


Callback functions aren't exclusive to JavaScript, but they're incredibly common and crucial for many of the patterns you'll read and write!

-----------

Question 2 of 5

Consider the following two functions:

function each(array, callback) {
  for (let i = 0; i < array.length; i++) {
    if (callback(array[i])) {
      console.log(array[i]);
    }
  }
}

function isPositive(n) {
  return n > 0;
};

The following is then executed:

each([-2, 7, 11, -4, -10], isPositive);

What is outputted to the console?

Ans---- 7, 11,

There's quite a bit going on, so let's break it down each step!

The each() function takes in two arguments: an array, and callback function. The code within comprises of a for loop and a conditional: it first iterates through all the values of a supplied array argument, then prints out that values only _if_ its callback function returns true.

The isPositive() function returns a boolean depending on the argument passed in (i.e., true if the number passed in is positive, and false if not).

As such, when each([-2, 7, 11, -4, -10], isPositive); is executed, the each() function iterates through the entire array and only prints out values to the console that return true when tested against the callback function: 7 and 11.
----------
Array Methods

Where have you probably seen callback functions used? In array methods! Functions are commonly passed into array methods and called on elements within an array (i.e., the array on which the method was called).

Let's check out a couple in detail:

    forEach()
    map()
    filter()

forEach()

array.forEach(function callback(currentValue, index, array) {
    // function code here
});


[1, 5, 2, 4, 6, 3].forEach(function logIfOdd(n) {
  if (n % 2 !== 0) {
    console.log(n);
  }
});


const favoriteFlavors = ['cookie dough', 'salted caramel', 'toffee'];

favoriteFlavors.forEach(function(flavor) {
  // debugger;
  console.log('I enjoy ' + flavor + ' ice cream!');
});








---------------
Question 3 of 5

Which of the following are valid ways to iterate through an array and log each value to the console?

          [1, 2, 3, 4].forEach(function(num) {
             console.log(num);
          });

          function logNum (num) {
             console.log(num);
          }

          [1, 2, 3, 4].forEach(logNum);
--

Close Modal
Thanks for completing that!

There were quite a few options, so let's break this one down:

The following approach works because we pass an anonymous callback that takes a number, num, as an argument:

[1, 2, 3, 4].forEach(function(num) {
  console.log(num);
});

Compare the above with the following approach does does not work, since no arguments are passed into the callback:

[1, 2, 3, 4].forEach(function() {
  console.log(num);
});

Passing in a defined function as the callback works just fine, however:

function logNum (num) {
  console.log(num);
}

[1, 2, 3, 4].forEach(logNum);

And lastly, the following approach does not work because no callback function is passed in:

[1, 2, 3, 4].forEach(console.log);





===============


/* Using map()
 *
 * Using the musicData array and map():
 *   - Return a string for each item in the array in the following format:
 *     <album-name> by <artist> sold <sales> copies
 *   - Store the returned data in a new albumSalesStrings variable
 *
 * Note:
 *   - Do not delete the musicData variable
 *   - Do not alter any of the musicData content
 *   - Do not format the sales number; leave it as a long string of digits
 */

const musicData = [
    { artist: 'Adele', name: '25', sales: 1731000 },
    { artist: 'Drake', name: 'Views', sales: 1608000 },
    { artist: 'Beyonce', name: 'Lemonade', sales: 1554000 },
    { artist: 'Chris Stapleton', name: 'Traveller', sales: 1085000 },
    { artist: 'Pentatonix', name: 'A Pentatonix Christmas', sales: 904000 },
    { artist: 'Original Broadway Cast Recording', 
      name: 'Hamilton: An American Musical', sales: 820000 },
    { artist: 'Twenty One Pilots', name: 'Blurryface', sales: 738000 },
    { artist: 'Prince', name: 'The Very Best of Prince', sales: 668000 },
    { artist: 'Rihanna', name: 'Anti', sales: 603000 },
    { artist: 'Justin Bieber', name: 'Purpose', sales: 554000 }
];

const albumSalesStrings = musicData.map(x => x.name + ' by ' +  x.artist + ' sold ' +  x.sales + ' copies');

console.log(albumSalesStrings);

----------------

Filter

/* Using filter()
 *
 * Using the musicData array and filter():
 *   - Return only album objects where the album's name is
 *     10 characters long, 25 characters long, or anywhere in between
 *   - Store the returned data in a new `results` variable
 *
 * Note:
 *   - Do not delete the musicData variable
 *   - Do not alter any of the musicData content
 */

const musicData = [
    { artist: 'Adele', name: '25', sales: 1731000 },
    { artist: 'Drake', name: 'Views', sales: 1608000 },
    { artist: 'Beyonce', name: 'Lemonade', sales: 1554000 },
    { artist: 'Chris Stapleton', name: 'Traveller', sales: 1085000 },
    { artist: 'Pentatonix', name: 'A Pentatonix Christmas', sales: 904000 },
    { artist: 'Original Broadway Cast Recording', 
      name: 'Hamilton: An American Musical', sales: 820000 },
    { artist: 'Twenty One Pilots', name: 'Blurryface', sales: 738000 },
    { artist: 'Prince', name: 'The Very Best of Prince', sales: 668000 },
    { artist: 'Rihanna', name: 'Anti', sales: 603000 },
    { artist: 'Justin Bieber', name: 'Purpose', sales: 554000 }
];

// const results = musicData.filter(word => word.name.length > 10 );

const results = musicData.filter(function(md)
{
    return (md.name.length > 9 && md.name.length < 26);
});

console.log(results);
